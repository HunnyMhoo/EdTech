---
description: Specification for data models, API structures, and data flow between frontend/backend with timezone handling
globs: backend/services/*,backend/repositories/*,frontend/src/features/*/api/*,frontend/src/state/*,backend/models/*
alwaysApply: false
---


# data-models-and-flow

## Core Data Models

### Mission Model (Importance: 95)
- Located in `backend/models/daily_mission.py`
- Represents daily user missions with:
  - 5 unique questions per mission
  - Status tracking (NOT_STARTED, IN_PROGRESS, COMPLETE, ARCHIVED)
  - User answers and progress tracking
  - Timezone-aware date handling (UTC+7)
  - Question feedback viewing status

### Question Model (Importance: 90)
- Located in `backend/repositories/question_repository.py`
- Maintains question pool with:
  - Question text and choices
  - Correct answer identification
  - Feedback content
  - In-memory caching for performance

## Data Flow

### Mission Generation Flow (Importance: 85)
- Service: `backend/services/mission_generation_service.py`
- Flow:
  1. Validates no existing mission for user/day
  2. Selects 5 random unique questions
  3. Creates mission with NOT_STARTED status
  4. Associates questions with mission

### Mission Progress Flow (Importance: 80)
- Service: `backend/services/mission_progress_service.py`
- Flow:
  1. Updates user answer submissions
  2. Tracks feedback viewing status
  3. Automatically transitions states based on completion criteria
  4. Syncs progress between frontend/backend

### Timezone Management (Importance: 75)
- Service: `backend/services/utils.py`
- Handles:
  - Mission date calculations in UTC+7
  - Mission archiving timing
  - Daily reset scheduling
  - Date-based mission availability

### API Response Structures

#### Mission API (Importance: 85)
```typescript
interface Mission {
  id: string;
  userId: string;
  date: string; // UTC+7 format
  questions: Question[];
  status: MissionStatus;
  currentQuestionIndex: number;
  answers: Answer[];
}
```

#### Question API (Importance: 80)
```typescript
interface Question {
  id: string;
  text: string;
  choices: Choice[];
  correctAnswerId: string;
  feedback: string;
}
```

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga data-models-and-flow".